@use "sass:math";

@function strip-units($value) {
	@return math.div($value, ($value * 0 + 1));
}

@function r($pxval) {
	@if not unitless($pxval) {
		$pxval: strip-units($pxval);
	}
	$base: $fontSizeBase;
	@if not unitless($base) {
		$base: strip-units($base);
	}

	@return math.div($pxval, $base) * 1rem;
}

@mixin bp($width, $value: max) {
	@if $value == min {
		@media screen and (min-width: $width) {
			@content;
		}
	} @else if $value == max {
		@media screen and (max-width: $width - 1) {
			@content;
		}
	} @else {
		@media (max-width: $width - 1) and (min-width: $value) {
			@content;
		}
	}
}

@mixin font_face($file_name, $font_name: $file_name, $weight: normal, $style: normal) {
	@font-face {
		font-family: quote($font_name);
		src: url('../fonts/' + $file-name + '.woff2') format('woff2'), url('../fonts/' + $file-name + '.woff') format('woff');
		font-weight: $weight;
		font-style: $style;
		font-display: swap;
	}
}

@mixin cover_img {
	display: block;
	width: 100%;
	height: 100%;

	object-fit: cover;
}

@mixin contain_img {
	display: block;
	width: 100%;
	height: 100%;

	object-fit: contain;
}

@mixin flex_block($flex-direction: row, $flex-wrap: wrap, $content: space-between, $align-items: flex-start, $align-content: flex-start) {
	display: flex;
	flex-direction: $flex-direction;
	flex-wrap: $flex-wrap;
	justify-content: $content;
	align-content: $align-content;
	align-items: $align-items;
}

@mixin appearance($value: button) {
	-moz-appearance: $value;
	-webkit-appearance: $value;
	appearance: $value;
}

@mixin transition_opacity {
	transition: opacity 0.3s ease;
	will-change: opacity;
}
